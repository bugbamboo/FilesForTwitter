import pandas as pd
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.metrics import classification_report,confusion_matrix
import numpy as np
from gensim.test.utils import common_texts, get_tmpfile
from gensim.models import Word2Vec
import pickle
# DataFrame
import pandas as pd

# Matplot
import matplotlib.pyplot as plt
%matplotlib inline

# Scikit-learn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
from sklearn.manifold import TSNE
from sklearn.feature_extraction.text import TfidfVectorizer

# Keras
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Activation, Dense, Dropout, Embedding, Flatten, Conv1D, MaxPooling1D, LSTM
from tensorflow.keras import utils
from tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping

# nltk
import nltk
from nltk.corpus import stopwords
from  nltk.stem import SnowballStemmer

# Word2vec
import gensim

# Utility
import re
import numpy as np
import os
from collections import Counter
import logging
import time
import pickle
import itertools
from tensorflow import keras
df = pd.read_csv("data2_prepared.csv")
df.drop(labels=['Unnamed: 0'], axis=1, inplace=True)
df = df[df['TEXT'].notnull()]
df = df[df['SENTIMENT']!=2]
df = df.replace([4],1)
df_train, df_test = train_test_split(df, test_size=1-0.8, random_state=42)
tokenizer = Tokenizer()
tokenizer.fit_on_texts(df_train.TEXT)
vocab_size = len(tokenizer.word_index) + 1
model = keras.models.load_model('model1')
def predict(text):
    x_test = pad_sequences(tokenizer.texts_to_sequences([text]), maxlen=300)
    score = model.predict([x_test])[0]
    if score<0.5:
        return 'Negative: '+str(score[0])
    else:
        return 'Positive: '+str(score[0])
